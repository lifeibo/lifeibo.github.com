<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language | 李子的博客]]></title>
  <link href="http://blog.lifeibo.com/blog/categories/language/atom.xml" rel="self"/>
  <link href="http://blog.lifeibo.com/"/>
  <updated>2014-07-26T16:50:00+08:00</updated>
  <id>http://blog.lifeibo.com/</id>
  <author>
    <name><![CDATA[lifeibo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ngx_lua与go高并发性能对比]]></title>
    <link href="http://blog.lifeibo.com/blog/2013/01/28/ngx-lua-and-go.html"/>
    <updated>2013-01-28T00:46:00+08:00</updated>
    <id>http://blog.lifeibo.com/blog/2013/01/28/ngx-lua-and-go</id>
    <content type="html"><![CDATA[<p>nginx在处理高并发能力上非常出色，而go作为新时代互联网语言，在设计之初就为实现高并发。</p>

<p>ngx_lua由nginx来处理网络事件，并使用协程来实现非阻塞，从而实现高并发。
go语言级别提供非阻塞的api，同样使用协程来提供高并发处理。</p>

<p>我们来测试对比一下两者的性能。</p>

<pre><code>ngx_lua:Tengine/1.4.3+luajit+ngx_lua
go:go1.0.3
</code></pre>

<p>分别实现512字节的内容的输出，对比在不同并发下的qps。</p>

<p>测试机器：</p>

<pre><code>16core Intel(R) Xeon(R) CPU E5520  @ 2.27GHz  
Linux localhost 2.6.18-164.el5 #1 SMP Tue Aug 18 15:51:48 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
</code></pre>

<p>使用ab进行测试，测试结果如下：</p>

<table>
<thead>
<tr>
<th>短连接  </th>
<th> 100                       </th>
<th> 200   </th>
<th> 500   </th>
<th> 1000  </th>
<th> 2000</th>
</tr>
</thead>
<tbody>
<tr>
<td>ngx_lua </td>
<td> qps:17329 us:2.6% sy:2.2% </td>
<td> 17744 </td>
<td> 16443 </td>
<td> 15852 </td>
<td> 13589</td>
</tr>
<tr>
<td>go      </td>
<td> qps:16538 us:9.1% sy:3.6% </td>
<td> 16546 </td>
<td> 15988 </td>
<td> 15032 </td>
<td> 13757</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>长连接  </th>
<th> 100                       </th>
<th> 200   </th>
<th> 500</th>
</tr>
</thead>
<tbody>
<tr>
<td>ngx_lua </td>
<td> qps:72274 us:13.8% sy:8.5 </td>
<td> 61204 </td>
<td> 61983</td>
</tr>
<tr>
<td>go      </td>
<td> qps:39072 us:29% sy:15%   </td>
<td> 38688 </td>
<td> 38238</td>
</tr>
</tbody>
</table>


<p><strong>从结果中，可以看出短连接时，两者qps相差不大，而长连接时，两者相差较大。go的cpu占用比ngx_lua要高不少。另外，go在并发数增加的情况下，性能依然出色。</strong></p>

<p>相关测试代码。</p>

<p>lua代码：</p>

<pre><code>ngx.print("aaaaa...512...aaa")
</code></pre>

<p>go 代码：</p>

<pre><code>package main

import (
    "net/http"
    "log"
    "fmt"
    "runtime"
)

func handler512(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Connection", "keep-alive")
    a := []byte("aaaaa...512...aaa")
    w.Header().Set("Content-Length", fmt.Sprintf("%d", len(a)))
    w.Write(a)
}

func main() {
    runtime.GOMAXPROCS(runtime.NumCPU())

    http.HandleFunc("/512b", handler512)

    log.Fatal(http.ListenAndServe(":8080", nil))
}
</code></pre>
]]></content>
  </entry>
  
</feed>
