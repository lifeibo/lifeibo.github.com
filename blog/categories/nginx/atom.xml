<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nginx | 桃李木子]]></title>
  <link href="http://www.lifeibo.com/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://www.lifeibo.com/"/>
  <updated>2012-12-21T19:36:53+08:00</updated>
  <id>http://www.lifeibo.com/</id>
  <author>
    <name><![CDATA[lifeibo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nginx中slab分配大内存的陷阱]]></title>
    <link href="http://www.lifeibo.com/blog/2012/12/19/slab-usage-alloc-larger-memory.html"/>
    <updated>2012-12-19T17:57:00+08:00</updated>
    <id>http://www.lifeibo.com/blog/2012/12/19/slab-usage-alloc-larger-memory</id>
    <content type="html"><![CDATA[<p>我们在开发nginx模块时，需要很小心，nginx里面有很多陷阱是我们需要注意的。之前有人提到过slab分配器在使用时，不适合大内存分配，否则会出现分配不出内存的现象。</p>

<p>nginx一般使用slab来管理共享内存，在程序启动时，很分配好需要共享的内存，然后使用slab来进行初始化，之后就交给slab来管理这段内存。slab的源码分析与合适，在我之前的博客里面有分析过。这次我们针对性的看看，为什么会出现分配不出内存的现象。</p>

<p>分配内存时，会调用<code>ngx_slab_alloc_locked</code>，在这个函数里面会先判断size是否大于<code>ngx_slab_max_size</code>，代码如下。</p>

<pre><code>void *
ngx_slab_alloc_locked(ngx_slab_pool_t *pool, size_t size)
{
    size_t            s;
    uintptr_t         p, n, m, mask, *bitmap;
    ngx_uint_t        i, slot, shift, map;
    ngx_slab_page_t  *page, *prev, *slots;

    /* 判断大小 */
    if (size &gt;= ngx_slab_max_size) {

        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle-&gt;log, 0,
                "slab alloc: %uz", size);

        /* 直接分配页 */
        page = ngx_slab_alloc_pages(pool, (size + ngx_pagesize - 1)
                &gt;&gt; ngx_pagesize_shift);
        if (page) {
            p = (page - pool-&gt;pages) &lt;&lt; ngx_pagesize_shift;
            p += (uintptr_t) pool-&gt;start;

        } else {
            p = 0;
        }

        goto done;
    }

    ...

}
</code></pre>

<!--more-->


<p><code>ngx_slab_max_size</code>在nginx调用<code>ngx_slab_init</code>的时候初始化为<code>ngx_pagesize / 2</code>。我们知道，slab会将整块的内存分成pages，每个pages大小为<code>ngx_pagesize</code>，slab在分配小内存时，会将一个page拆分成多个小块进行分配，而如果我们分配的内存大于<code>ngx_pagesize / 2</code>时，slab是没办法进行拆分的，所以当我们分配的内存大于<code>ngx_slab_max_size</code>时，直接分配页内存就可以了（因为不需要进行拆分）。所以这里直接调用<code>ngx_slab_alloc_pages</code>来分配内存。<code>ngx_slab_alloc_pages</code>的代码如下：</p>

<pre><code>static ngx_slab_page_t *
ngx_slab_alloc_pages(ngx_slab_pool_t *pool, ngx_uint_t pages)
{
    ngx_slab_page_t  *page, *p;

    for (page = pool-&gt;free.next; page != &amp;pool-&gt;free; page = page-&gt;next) {

        /* 判断当前页还能分配多少连续的页 */
        if (page-&gt;slab &gt;= pages) {

            if (page-&gt;slab &gt; pages) {
                /* 重新设置剩下还能分配的连续空间 */
                page[pages].slab = page-&gt;slab - pages;
                page[pages].next = page-&gt;next;
                page[pages].prev = page-&gt;prev;

                p = (ngx_slab_page_t *) page-&gt;prev;
                p-&gt;next = &amp;page[pages];
                page-&gt;next-&gt;prev = (uintptr_t) &amp;page[pages];

            } else {
                /* 剩下连续的pages正好够用 */
                p = (ngx_slab_page_t *) page-&gt;prev;
                p-&gt;next = page-&gt;next;
                page-&gt;next-&gt;prev = page-&gt;prev;
            }

            page-&gt;slab = pages | NGX_SLAB_PAGE_START;
            page-&gt;next = NULL;
            page-&gt;prev = NGX_SLAB_PAGE;

            /* 如果只需要分配一个页，则直接返回 */
            if (--pages == 0) {
                return page;
            }

            /* 否则将剩下所需要的页设置占用标记 */
            for (p = page + 1; pages; pages--) {
                p-&gt;slab = NGX_SLAB_PAGE_BUSY;
                p-&gt;next = NULL;
                p-&gt;prev = NGX_SLAB_PAGE;
                p++;
            }

            return page;
        }
    }

    ngx_slab_error(pool, NGX_LOG_CRIT, "ngx_slab_alloc() failed: no memory");

    return NULL;
}
</code></pre>

<p>从上面的代码中我们可以看到，在空闲页中<code>p-&gt;slab</code>用于标记剩下连续，连接页的第一个页会设置这个值。所以在slab初始化之后，第一个页的slab被赋值为所有页的数量。在使用过程中，由于经常alloc与free，会造成连续空闲页变得断断续续，当没有连续的所需要的空闲页进行分配时，就会出现内存无法分配的问题。所以，使用slab进行大内存分配时，就会出现内存无法分配的现象。所以，我们在使用中，应该避免使用slab进行大内存的分配。</p>
]]></content>
  </entry>
  
</feed>
